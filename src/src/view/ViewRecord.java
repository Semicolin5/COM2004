package src.view;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;
import src.controller.Controller;
import src.controller.Main;
import src.objects.Grade;
import src.objects.PeriodOfStudy;
import src.objects.Student;

import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

/**
 * ViewRecords.java
 * Only accessible to Students and Teachers
 */
public class ViewRecord extends Form {

    private JButton backButton;
    private JButton loadRecordButton;
    private JTable displayOutcome;
    private JPanel panel1;
    private JList selectStudent;
    private JButton loadStudentButton;
    private DefaultTableModel outcomeModel;
    private DefaultListModel<String> studentListModel;
    private int username; // int for the current user record being viewed
    private JScrollPane studentScrollPane;
    private JComboBox periodComboBox;
    private JTextField titleField;
    private JTextField forenameField;
    private JTextField surnameField;
    private JTextField tutorField;
    private JTextField emailField;
    private JTextField degreeField;

    /**
     * Constructor sets up an empty JTable, and sets up a JList containing the periods of study, and levels for the
     * student.
     * The privilege is checked to determine if it is a student or a teacher viewing the record. If it is a teacher,
     * then another JList is loaded containing all the students. The teacher can load this student and view their progress.
     * If a student is looking at their record, this list is not loaded, and they can only see their own record.
     *
     * @param frame - JFrame with properties defined in the GUIFrame class.
     */
    public ViewRecord(GUIFrame frame) {
        super(frame);

        backButton.addActionListener(new BackButtonHandler());

        // setting up JLists and Tables depending on whether being viewed by teacher or student
        // displays the page differently depending if the
        if (Main.getPriv() == 2) { // running for a teacher
            // if the user is a teacher, load the JList enabling different students to be selected
            studentListModel = new DefaultListModel<>();
            for (Student s : Controller.getStudents()) {
                studentListModel.addElement(s.getLogin());
            }
            selectStudent.setModel(studentListModel);
        } else if (Main.getPriv() == 1) { // running for a student
            //Remove teacher specific form components
            studentScrollPane.setVisible(false);
            loadStudentButton.setVisible(false);

            username = Main.getLoginID();
            setupPeriodCombo(username);
            addStudentInfo(username);
        }

        setJPanel(panel1);
        frame.setTitle("View Record");

        // setting up the columns in the table
        outcomeModel = new DefaultTableModel();
        outcomeModel.addColumn("Module");
        outcomeModel.addColumn("Initial Percent Achieved");
        outcomeModel.addColumn("Resit Percent Achieved");
        displayOutcome.setModel(outcomeModel);

        // setting up loadRecordButton and loadStudentButton
        loadRecordButton.addActionListener(new LoadRecordHandler());
        loadStudentButton.addActionListener(new LoadStudentHandler());
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(14, 4, new Insets(0, 0, 0, 0), -1, -1));
        final JScrollPane scrollPane1 = new JScrollPane();
        panel1.add(scrollPane1, new GridConstraints(0, 1, 7, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        displayOutcome = new JTable();
        scrollPane1.setViewportView(displayOutcome);
        studentScrollPane = new JScrollPane();
        panel1.add(studentScrollPane, new GridConstraints(7, 0, 6, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        selectStudent = new JList();
        studentScrollPane.setViewportView(selectStudent);
        backButton = new JButton();
        backButton.setText("Back");
        panel1.add(backButton, new GridConstraints(12, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        loadRecordButton = new JButton();
        loadRecordButton.setText("Load Record");
        panel1.add(loadRecordButton, new GridConstraints(8, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        loadStudentButton = new JButton();
        loadStudentButton.setText("Load Student");
        panel1.add(loadStudentButton, new GridConstraints(10, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final Spacer spacer1 = new Spacer();
        panel1.add(spacer1, new GridConstraints(7, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        final Spacer spacer2 = new Spacer();
        panel1.add(spacer2, new GridConstraints(9, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        final Spacer spacer3 = new Spacer();
        panel1.add(spacer3, new GridConstraints(11, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        final Spacer spacer4 = new Spacer();
        panel1.add(spacer4, new GridConstraints(13, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        periodComboBox = new JComboBox();
        panel1.add(periodComboBox, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label1 = new JLabel();
        label1.setText("Forename");
        panel1.add(label1, new GridConstraints(2, 2, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label2 = new JLabel();
        label2.setText("Surname");
        panel1.add(label2, new GridConstraints(3, 2, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label3 = new JLabel();
        label3.setText("Personal Tutor");
        panel1.add(label3, new GridConstraints(4, 2, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label4 = new JLabel();
        label4.setText("Degree Code");
        panel1.add(label4, new GridConstraints(6, 2, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label5 = new JLabel();
        label5.setText("Email");
        panel1.add(label5, new GridConstraints(5, 2, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label6 = new JLabel();
        label6.setText("Title");
        panel1.add(label6, new GridConstraints(1, 2, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        titleField = new JTextField();
        titleField.setEditable(false);
        titleField.setEnabled(true);
        panel1.add(titleField, new GridConstraints(1, 3, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        forenameField = new JTextField();
        forenameField.setEditable(false);
        panel1.add(forenameField, new GridConstraints(2, 3, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        surnameField = new JTextField();
        surnameField.setEditable(false);
        panel1.add(surnameField, new GridConstraints(3, 3, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        tutorField = new JTextField();
        tutorField.setEditable(false);
        panel1.add(tutorField, new GridConstraints(4, 3, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        emailField = new JTextField();
        emailField.setEditable(false);
        panel1.add(emailField, new GridConstraints(5, 3, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        degreeField = new JTextField();
        degreeField.setEditable(false);
        panel1.add(degreeField, new GridConstraints(6, 3, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return panel1;
    }

    /**
     * LoadRecordHandler loads a students progress in a given period of study onto a JTable
     * possible that username hasn't been defined (if the teacher is viewing and hasn't yet loaded
     * a student.) //TODO possibly add check and do nothing rather than have unhandled nullpointerexception
     */
    private class LoadRecordHandler implements ActionListener {
        public void actionPerformed(ActionEvent actionEvent) {
            outcomeModel.setRowCount(0); // resets the table
            String periodOfStudyLabel = periodComboBox.getSelectedItem().toString(); // finds the period of study label
            for (Grade g : Controller.getStudentsGradeAtPeriod(username, periodOfStudyLabel)) {
                //TODO just need to check that resit isn't displayed as 0.00
                outcomeModel.addRow(new Object[]{g.getModuleCode(), g.getInitialPercent(), g.getResitPercent()});
            }
        }
    }

    /**
     * LoadStudentHandler targets a student. Only teachers will be able to call upon this method.
     */
    private class LoadStudentHandler implements ActionListener {
        public void actionPerformed(ActionEvent actionEvent) {
            username = Integer.parseInt((String) selectStudent.getSelectedValue()); // targeted student's login code
            setupPeriodCombo(username);

            //Clear the results table
            outcomeModel.setRowCount(0);

            addStudentInfo(username);
        }
    }

    private class BackButtonHandler implements ActionListener {
        public void actionPerformed(ActionEvent actionEvent) {
            changeJPanel(new Welcome(getFrame()).getJPanel());
        }
    }

    private void setupPeriodCombo(int loginID) {
        //if (periodComboBox.getModel().getSize() != 0)
        periodComboBox.removeAllItems();
        for (PeriodOfStudy pos : Controller.getPeriodsOfStudyForStudent(loginID)) {
            periodComboBox.addItem(pos.getLabel());
        }
    }

    private void addStudentInfo(int loginID) {
        Student student = Controller.getStudent(loginID);

        titleField.setText(student.getTitle());
        forenameField.setText(student.getForename());
        surnameField.setText(student.getSurname());
        tutorField.setText(student.getPersonalTutor());
        emailField.setText(student.getEmail());
        degreeField.setText(student.getDegreeCode());
    }

}
