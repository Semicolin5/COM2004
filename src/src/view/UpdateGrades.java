package src.view;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;
import src.controller.Controller;
import src.objects.Grade;
import src.objects.Module;
import src.objects.Student;

import javax.swing.*;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;

public class UpdateGrades extends Form {
    private JPanel panel1;
    private JList studentList;
    private JList moduleList;
    private DefaultListModel<String> studentModel;
    private DefaultListModel<String> moduleModel;
    private JTextField initialGrade;
    private JTextField resitGrade;
    private JTextField repeatGrade;
    private JButton updateButton;
    private JButton backButton;

    private int loginID;
    private Grade selectedGrades;

    public UpdateGrades(GUIFrame frame) {
        super(frame);
        frame.setTitle("Update Grades Screen");

        backButton.addActionListener(new BackButtonHandler());

        setJPanel(panel1);

        studentModel = new DefaultListModel<>();
        for (Student student : Controller.getStudents()) {
            studentModel.addElement(student.getLogin());
        }
        studentList.setModel(studentModel);

        moduleModel = new DefaultListModel<>();
        moduleList.setModel(moduleModel);
        studentList.getSelectionModel().addListSelectionListener(new studentListHandler());

        moduleList.getSelectionModel().addListSelectionListener(new moduleListHandler());

        updateButton.addActionListener(new updateButtonHandler());
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(5, 4, new Insets(0, 0, 0, 0), -1, -1));
        final JScrollPane scrollPane1 = new JScrollPane();
        panel1.add(scrollPane1, new GridConstraints(1, 0, 3, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        studentList = new JList();
        studentList.setSelectionMode(0);
        scrollPane1.setViewportView(studentList);
        final JScrollPane scrollPane2 = new JScrollPane();
        panel1.add(scrollPane2, new GridConstraints(1, 1, 3, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        moduleList = new JList();
        final DefaultListModel defaultListModel1 = new DefaultListModel();
        moduleList.setModel(defaultListModel1);
        moduleList.setSelectionMode(0);
        scrollPane2.setViewportView(moduleList);
        final JLabel label1 = new JLabel();
        label1.setText("Students");
        panel1.add(label1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label2 = new JLabel();
        label2.setText("Modules");
        panel1.add(label2, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label3 = new JLabel();
        label3.setText("Repeat %");
        panel1.add(label3, new GridConstraints(3, 2, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(68, 15), null, 0, false));
        final JLabel label4 = new JLabel();
        label4.setText("Resit %");
        panel1.add(label4, new GridConstraints(2, 2, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(68, 15), null, 0, false));
        final JLabel label5 = new JLabel();
        label5.setText("Initial %");
        panel1.add(label5, new GridConstraints(1, 2, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(68, 15), null, 0, false));
        resitGrade = new JTextField();
        panel1.add(resitGrade, new GridConstraints(2, 3, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        repeatGrade = new JTextField();
        panel1.add(repeatGrade, new GridConstraints(3, 3, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        initialGrade = new JTextField();
        panel1.add(initialGrade, new GridConstraints(1, 3, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        updateButton = new JButton();
        updateButton.setText("Update");
        panel1.add(updateButton, new GridConstraints(4, 3, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label6 = new JLabel();
        label6.setText("Grades");
        panel1.add(label6, new GridConstraints(0, 3, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        backButton = new JButton();
        backButton.setText("Back");
        panel1.add(backButton, new GridConstraints(4, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return panel1;
    }

    private class studentListHandler implements ListSelectionListener {
        public void valueChanged(ListSelectionEvent listSelectionEvent) {
            ListSelectionModel model = (ListSelectionModel) listSelectionEvent.getSource();

            //Get list of student's modules
            int index = model.getLeadSelectionIndex();
            loginID = Integer.valueOf((String) studentList.getModel().getElementAt(index));
            if (model.getValueIsAdjusting()) {
                clearGrades();

                //Clear module list
                moduleModel.removeAllElements();

                //Hold already processed module codes to detect any duplicates
                ArrayList<String> duplicateCodes = new ArrayList<>();
                for (Module module : Controller.getStudentModules(loginID)) {
                    //If we haven't seen this form before, add to duplicates list and form
                    if (!duplicateCodes.contains(module.getCode())) {
                        duplicateCodes.add(module.getCode());
                        moduleModel.addElement(module.getCode());
                    }
                }
            }
        }
    }

    private class moduleListHandler implements ListSelectionListener {
        public void valueChanged(ListSelectionEvent listSelectionEvent) {
            ListSelectionModel model = (ListSelectionModel) listSelectionEvent.getSource();

            //Get student's module grades
            if (model.getValueIsAdjusting()) {
                clearGrades();

                String moduleCode = moduleModel.getElementAt(model.getLeadSelectionIndex());
                selectedGrades = Controller.getStudentModuleGrades(loginID, moduleCode);

                //Check if grades have been set before setting text fields
                if (selectedGrades.getInitialPercent() == -1) {
                    initialGrade.setText("");
                } else {
                    initialGrade.setText(String.valueOf(selectedGrades.getInitialPercent()));
                }

                if (selectedGrades.getResitPercent() == -1) {
                    resitGrade.setText("");
                } else {
                    resitGrade.setText(String.valueOf(selectedGrades.getResitPercent()));
                }

                //if (selectedGrades.getRepeatPercent() == -1) {
                //    repeatGrade.setText("");
                //} else {
                //    repeatGrade.setText(String.valueOf(selectedGrades.getRepeatPercent()));
                //}
            }
        }
    }

    private class updateButtonHandler implements ActionListener {
        public void actionPerformed(ActionEvent actionEvent) {
            Controller.updateGrades(loginID, selectedGrades.getModuleCode(),
                    String.valueOf(selectedGrades.getLabel()), Float.valueOf(initialGrade.getText()),
                    Float.valueOf(resitGrade.getText()), Float.valueOf(repeatGrade.getText()));
        }
    }

    private class BackButtonHandler implements ActionListener {
        public void actionPerformed(ActionEvent actionEvent) {
            changeJPanel(new Welcome(getFrame()).getJPanel());
        }
    }

    private void clearGrades() {
        initialGrade.setText("");
        resitGrade.setText("");
        repeatGrade.setText("");
    }

}
